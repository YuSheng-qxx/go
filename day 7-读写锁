package main

import (
	"sync"
	"time"
)

var m *sync.RWMutex
func main() {
	m = new(sync.RWMutex)
	// 写的时候啥也不能干
	go write(1)
	go read(2)
	go write(3)
	time.Sleep(2*time.Second)
}
func read(i int) {
	println(i,"read start")
	m.RLock()
	println(i,"reading")
	time.Sleep(1*time.Second)
	m.RUnlock()
	println(i,"read over")
}
func write(i int) {
	println(i,"write start")
	m.Lock()
	println(i,"writing")
	time.Sleep(1*time.Second)
	m.Unlock()
	println(i,"write over")
}
/*var m *sync.RWMutex
func main() {
	m = new(sync.RWMutex)
	// 多个同时读
	go read(1)
	go read(2)
	time.Sleep(2*time.Second)
}
func read(i int) {
	println(i,"read start")
	m.RLock()
	println(i,"reading")
	time.Sleep(1*time.Second)
	m.RUnlock()
	println(i,"read over")
}
/*var count int
var rw sync.RWMutex
func main() {
	ch := make(chan struct{}, 10)
	for i := 0; i < 5; i++ {
		go read(i, ch)
	}
	for i := 0; i < 5; i++ {
		go write(i, ch)
	}
	for i := 0; i < 10; i++ {
		<-ch
	}
}
func read(n int, ch chan struct{}) {
	rw.RLock()
	fmt.Printf("goroutine %d 进入读操作...\n", n)
	v := count
	fmt.Printf("goroutine %d 读取结束，值为：%d\n", n, v)
	rw.RUnlock()
	ch <- struct{}{}
}
func write(n int, ch chan struct{}) {
	rw.Lock()
	fmt.Printf("goroutine %d 进入写操作...\n", n)
	v := rand.Intn(1000)
	count = v
	fmt.Printf("goroutine %d 写入结束，新值为：%d\n", n, v)
	rw.Unlock()
	ch <- struct{}{}
}
/*func main() {
	var a = 0
	var lock sync.Mutex
	for i := 0; i < 1000; i++ {
		go func(idx int) {
			lock.Lock()
			defer lock.Unlock()
			a += 1
			fmt.Printf("goroutine %d, a=%d\n", idx, a)
		}(i)
	}
	// 等待 1s 结束主程序
	// 确保所有协程执行完
	time.Sleep(time.Second)
}
/*
func main() {
	var a = 0
	for i := 0; i < 1000; i++ {
		go func(idx int) {
			a += 1
			fmt.Println(a)
		}(i)
	}
	time.Sleep(time.Second)
}
 */
